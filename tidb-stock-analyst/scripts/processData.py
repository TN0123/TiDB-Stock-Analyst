from sentence_transformers import SentenceTransformer
import os
from tidb_vector.integrations import TiDBVectorClient
from dotenv import load_dotenv
import sys
import json


# downloads and embeds the model
embed_model = SentenceTransformer("sentence-transformers/msmarco-MiniLM-L12-cos-v5", trust_remote_code=True)
embed_model_dims = embed_model.get_sentence_embedding_dimension()


def text_to_embedding(text):
    # Generates embeddings for the text given
    embedding = embed_model.encode(text)
    return embedding.tolist()


# Load the connection string from the .env file
load_dotenv()


vector_store = TiDBVectorClient(
   # The table which will store the vector data.
   table_name='embedded_documents',
   # The connection string to the TiDB cluster.
   connection_string=os.environ.get('TIDB_DATABASE_URL'),
   # The dimension of the vector generated by the embedding model.
   vector_dimension=embed_model_dims,
   # Determine whether to recreate the table if it already exists.
   drop_existing_table=True,
)




# example of documents



def main():

    documents = json.loads(sys.argv[1])

    # documents = [
    #     {
    #         "title": "If You'd Invested $1,000 in Unity Software Stock 3 Years Ago, Here's How Much You'd Have Today",
    #         "link": "https://finance.yahoo.com/news/youd-invested-1-000-unity-150200492.html",
    #         "timestamp": 1724080714638
    #     },
    #     {
    #         "title": "Why Nikola Stock Crashed 10% This Morning",
    #         "link": "https://finance.yahoo.com/news/why-nikola-stock-crashed-10-150200763.html",
    #         "timestamp": 1724080714639
    #     },
    #     {
    #         "title": "Stocks ‘Climb Wall of Worry’ Before Jackson Hole: Markets Wrap",
    #         "link": "https://finance.yahoo.com/news/asia-set-cautious-start-jackson-232250696.html",
    #         "timestamp": 1724080714639
    #     }
    #     ]

    vector_store.insert(
        texts=[doc["title"] for doc in documents],
        embeddings=[text_to_embedding(doc["title"]) for doc in documents],
        metadatas=[{"link": doc["link"]} for doc in documents],
    )


main()